default:
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker --version
    - echo -e "\033[1;36m DO_RELEASE:$DO_RELEASE RELEASE_IMAGE:$RELEASE_IMAGE SKIP_CACHE:$SKIP_CACHE \033[0;37m"
    - echo -e "\033[1;36m DRUPAL_CURRENT:$DRUPAL_CURRENT DRUPAL_TRANSITION:$DRUPAL_TRANSITION DRUPAL_DEV:$DRUPAL_DEV \033[0;37m"
    # Pull base image from Docker hub.
    - docker pull --quiet $IMAGE_BASE || true
    - if [ ! $EXTRA_IMAGE == 0 ]; then docker pull --quiet $EXTRA_IMAGE || true; fi
    # Login to Gitlab and pull current image if exist.
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - echo -e "\033[1;36m Pull $CI_REGISTRY_IMAGE/$IMAGE \033[0;37m"
    - docker pull --quiet $CI_REGISTRY_IMAGE/$IMAGE || true
  artifacts:
    paths:
      - report.xml
    reports:
      junit: report.xml

stages:
  - build

variables:
  DRUPAL_CURRENT: '8.8'
  DRUPAL_TRANSITION: '8.9'
  DRUPAL_DEV: '9.0'
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  RELEASE_REGISTRY: docker.io
  RELEASE_IMAGE: index.docker.io/$RELEASE_USER
  # Publish result image to Docker Hub.
  DO_RELEASE: 1
  # Cache seems too hard, skip by default...
  SKIP_CACHE: 1
  SKIP_TESTS: 0
  EXTRA_IMAGE: 0

.build_test_release:
  script:
    # Build the image.
    - echo -e "\033[1;36m Build $CI_REGISTRY_IMAGE/$IMAGE from $DIR \033[0;37m"
    - |
      if [ $SKIP_CACHE == 0 ]; then
        docker build --compress --cache-from $CI_REGISTRY_IMAGE/$IMAGE --tag $CI_REGISTRY_IMAGE/$IMAGE $DIR
      else
        docker build --compress --tag $CI_REGISTRY_IMAGE/$IMAGE $DIR
      fi
    - docker images
    # Tests
    - |
      if [ $SKIP_TESTS == 0 ]; then
        echo -e "\033[1;36m Run $CI_REGISTRY_IMAGE/$IMAGE /scripts/run-tests.sh report \033[0;37m"
        docker run --rm -v $CI_PROJECT_DIR:/tmp/report -t $CI_REGISTRY_IMAGE/$IMAGE /scripts/run-tests.sh report
      fi
    - echo -e "\033[1;36m Push $CI_REGISTRY_IMAGE/$IMAGE \033[0;37m"
    # Push to Gitlab registry for next steps.
    - docker push $CI_REGISTRY_IMAGE/$IMAGE
  after_script:
    - docker tag $CI_REGISTRY_IMAGE/$IMAGE $RELEASE_IMAGE/$IMAGE
    - docker images
    # Login to Docker hub, tag and push.
    - |
      if [ $DO_RELEASE == 1 ]; then
        echo -e "\033[1;36m Push $RELEASE_IMAGE/$IMAGE to $RELEASE_REGISTRY with user $RELEASE_USER \033[0;37m"
        docker login -u $RELEASE_USER -p $RELEASE_PASSWORD $RELEASE_REGISTRY
        docker push $RELEASE_IMAGE/$IMAGE
      fi

current:
  stage: build
  extends: .build_test_release
  variables:
    # Base official image.
    IMAGE_BASE: drupal:${DRUPAL_CURRENT}-apache
    IMAGE: drupal8ci:${CI_COMMIT_BRANCH}-${DRUPAL_CURRENT}
    DIR: '${DRUPAL_CURRENT}'

transition:
  stage: build
  extends: .build_test_release
  variables:
    # Base official image.
    IMAGE_BASE: drupal:${DRUPAL_CURRENT}-apache
    IMAGE: drupal8ci:${CI_COMMIT_BRANCH}-${DRUPAL_TRANSITION}
    DIR: '${DRUPAL_TRANSITION}'

dev:
  stage: build
  extends: .build_test_release
  variables:
    # Base official image.
    IMAGE_BASE: drupal:${DRUPAL_CURRENT}-apache
    IMAGE: drupal8ci:${CI_COMMIT_BRANCH}-${DRUPAL_DEV}
    DIR: '${DRUPAL_DEV}'
